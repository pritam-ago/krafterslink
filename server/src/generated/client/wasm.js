
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('./runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.18.0
 * Query Engine version: 34b5a692b7bd79939a9a2c3ef97d816e749cda2f
 */
Prisma.prismaVersion = {
  client: "6.18.0",
  engine: "34b5a692b7bd79939a9a2c3ef97d816e749cda2f"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  username: 'username',
  password: 'password',
  name: 'name',
  bio: 'bio',
  avatar: 'avatar',
  role: 'role',
  domain: 'domain',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  approvalStatus: 'approvalStatus'
};

exports.Prisma.SocialLinkScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  title: 'title',
  url: 'url',
  icon: 'icon',
  category: 'category',
  displayOrder: 'displayOrder',
  isVisible: 'isVisible',
  clicks: 'clicks',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PostScalarFieldEnum = {
  id: 'id',
  authorId: 'authorId',
  title: 'title',
  slug: 'slug',
  content: 'content',
  excerpt: 'excerpt',
  coverImage: 'coverImage',
  status: 'status',
  viewCount: 'viewCount',
  publishedAt: 'publishedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TagScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  color: 'color',
  createdAt: 'createdAt'
};

exports.Prisma.PostTagScalarFieldEnum = {
  postId: 'postId',
  tagId: 'tagId',
  createdAt: 'createdAt'
};

exports.Prisma.CommentScalarFieldEnum = {
  id: 'id',
  postId: 'postId',
  authorId: 'authorId',
  content: 'content',
  parentId: 'parentId',
  isEdited: 'isEdited',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LikeScalarFieldEnum = {
  id: 'id',
  postId: 'postId',
  userId: 'userId',
  createdAt: 'createdAt'
};

exports.Prisma.FollowScalarFieldEnum = {
  id: 'id',
  followerId: 'followerId',
  followingId: 'followingId',
  createdAt: 'createdAt'
};

exports.Prisma.ActivityLogScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  description: 'description',
  metadata: 'metadata',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.Role = exports.$Enums.Role = {
  MEMBER: 'MEMBER',
  LEAD: 'LEAD',
  HEAD: 'HEAD',
  PRESIDENT: 'PRESIDENT'
};

exports.Domain = exports.$Enums.Domain = {
  DEVELOPMENT: 'DEVELOPMENT',
  PR_AND_MANAGEMENT: 'PR_AND_MANAGEMENT',
  CREATIVES: 'CREATIVES',
  CONTENT: 'CONTENT',
  COMPETITIVE_PROGRAMMING: 'COMPETITIVE_PROGRAMMING',
  WEB3: 'WEB3',
  CYBERSECURITY: 'CYBERSECURITY'
};

exports.ApprovalStatus = exports.$Enums.ApprovalStatus = {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED'
};

exports.LinkCategory = exports.$Enums.LinkCategory = {
  SOCIAL: 'SOCIAL',
  PORTFOLIO: 'PORTFOLIO',
  PROJECT: 'PROJECT',
  CONTACT: 'CONTACT',
  OTHER: 'OTHER'
};

exports.PostStatus = exports.$Enums.PostStatus = {
  DRAFT: 'DRAFT',
  PUBLISHED: 'PUBLISHED',
  ARCHIVED: 'ARCHIVED',
  UNPUBLISHED: 'UNPUBLISHED'
};

exports.ActivityType = exports.$Enums.ActivityType = {
  POST_CREATED: 'POST_CREATED',
  POST_UPDATED: 'POST_UPDATED',
  POST_DELETED: 'POST_DELETED',
  COMMENT_CREATED: 'COMMENT_CREATED',
  LINK_ADDED: 'LINK_ADDED',
  USER_JOINED: 'USER_JOINED',
  USER_FOLLOWED: 'USER_FOLLOWED'
};

exports.Prisma.ModelName = {
  User: 'User',
  SocialLink: 'SocialLink',
  Post: 'Post',
  Tag: 'Tag',
  PostTag: 'PostTag',
  Comment: 'Comment',
  Like: 'Like',
  Follow: 'Follow',
  ActivityLog: 'ActivityLog'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "C:\\Users\\shiva\\Downloads\\krafters link\\krafterslink\\server\\src\\generated\\client",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "windows",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "C:\\Users\\shiva\\Downloads\\krafters link\\krafterslink\\server\\prisma\\schema.prisma",
    "isCustomOutput": true
  },
  "relativeEnvPaths": {
    "rootEnvPath": null,
    "schemaEnvPath": "../../../.env"
  },
  "relativePath": "../../../prisma",
  "clientVersion": "6.18.0",
  "engineVersion": "34b5a692b7bd79939a9a2c3ef97d816e749cda2f",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "// Prisma Schema for Club Websites (Link Hub + Blog Platform)\n\ngenerator client {\n  provider = \"prisma-client-js\"\n  output   = \"../src/generated/client\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\n// ============================================\n// USER & ROLE MANAGEMENT\n// ============================================\n\nenum Role {\n  MEMBER\n  LEAD\n  HEAD\n  PRESIDENT\n}\n\nenum Domain {\n  DEVELOPMENT\n  PR_AND_MANAGEMENT\n  CREATIVES\n  CONTENT\n  COMPETITIVE_PROGRAMMING\n  WEB3\n  CYBERSECURITY\n}\n\nenum ApprovalStatus {\n  PENDING\n  APPROVED\n  REJECTED\n}\n\nmodel User {\n  id             String         @id @default(cuid())\n  email          String         @unique\n  username       String         @unique\n  password       String // Store hashed passwords\n  name           String\n  bio            String?\n  avatar         String? // URL to profile picture\n  role           Role           @default(MEMBER)\n  domain         Domain? // Which of the 7 domains they belong to\n  isActive       Boolean        @default(true)\n  createdAt      DateTime       @default(now())\n  updatedAt      DateTime       @updatedAt\n  approvalStatus ApprovalStatus @default(PENDING)\n\n  // Relations\n  socialLinks SocialLink[]\n  posts       Post[]\n  comments    Comment[]\n  likes       Like[]\n\n  // Follow relationships\n  following Follow[] @relation(\"UserFollowing\")\n  followers Follow[] @relation(\"UserFollowers\")\n\n  @@index([email])\n  @@index([username])\n}\n\n// ============================================\n// LINK HUB (Linktree-style)\n// ============================================\n\nenum LinkCategory {\n  SOCIAL\n  PORTFOLIO\n  PROJECT\n  CONTACT\n  OTHER\n}\n\nmodel SocialLink {\n  id           String       @id @default(cuid())\n  userId       String\n  title        String\n  url          String\n  icon         String? // Icon name or URL\n  category     LinkCategory @default(OTHER)\n  displayOrder Int          @default(0)\n  isVisible    Boolean      @default(true)\n  clicks       Int          @default(0)\n  createdAt    DateTime     @default(now())\n  updatedAt    DateTime     @updatedAt\n\n  // Relations\n  user User @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@index([userId])\n  @@index([displayOrder])\n}\n\n// ============================================\n// BLOG PLATFORM\n// ============================================\n\nenum PostStatus {\n  DRAFT\n  PUBLISHED\n  ARCHIVED\n  UNPUBLISHED\n}\n\nmodel Post {\n  id          String     @id @default(cuid())\n  authorId    String\n  title       String\n  slug        String     @unique\n  content     String     @db.Text\n  excerpt     String?\n  coverImage  String?\n  status      PostStatus @default(DRAFT)\n  viewCount   Int        @default(0)\n  publishedAt DateTime?\n  createdAt   DateTime   @default(now())\n  updatedAt   DateTime   @updatedAt\n\n  // Relations\n  author   User      @relation(fields: [authorId], references: [id], onDelete: Cascade)\n  tags     PostTag[]\n  comments Comment[]\n  likes    Like[]\n\n  @@index([authorId])\n  @@index([slug])\n  @@index([status])\n  @@index([publishedAt])\n}\n\nmodel Tag {\n  id        String   @id @default(cuid())\n  name      String   @unique\n  slug      String   @unique\n  color     String? // Hex color for UI\n  createdAt DateTime @default(now())\n\n  // Relations\n  posts PostTag[]\n\n  @@index([slug])\n}\n\nmodel PostTag {\n  postId    String\n  tagId     String\n  createdAt DateTime @default(now())\n\n  // Relations\n  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)\n  tag  Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)\n\n  @@id([postId, tagId])\n  @@index([postId])\n  @@index([tagId])\n}\n\nmodel Comment {\n  id        String   @id @default(cuid())\n  postId    String\n  authorId  String\n  content   String   @db.Text\n  parentId  String? // For nested/threaded comments\n  isEdited  Boolean  @default(false)\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  // Relations\n  post    Post      @relation(fields: [postId], references: [id], onDelete: Cascade)\n  author  User      @relation(fields: [authorId], references: [id], onDelete: Cascade)\n  parent  Comment?  @relation(\"CommentReplies\", fields: [parentId], references: [id], onDelete: Cascade)\n  replies Comment[] @relation(\"CommentReplies\")\n\n  @@index([postId])\n  @@index([authorId])\n  @@index([parentId])\n  @@index([createdAt])\n}\n\nmodel Like {\n  id        String   @id @default(cuid())\n  postId    String\n  userId    String\n  createdAt DateTime @default(now())\n\n  // Relations\n  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)\n  user User @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@unique([postId, userId]) // A user can only like a post once\n  @@index([postId])\n  @@index([userId])\n}\n\n// ============================================\n// FOLLOW SYSTEM\n// ============================================\n\nmodel Follow {\n  id          String   @id @default(cuid())\n  followerId  String // User who is following\n  followingId String // User being followed\n  createdAt   DateTime @default(now())\n\n  // Relations\n  follower  User @relation(\"UserFollowing\", fields: [followerId], references: [id], onDelete: Cascade)\n  following User @relation(\"UserFollowers\", fields: [followingId], references: [id], onDelete: Cascade)\n\n  @@unique([followerId, followingId]) // A user can only follow another user once\n  @@index([followerId])\n  @@index([followingId])\n}\n\n// ============================================\n// OPTIONAL: ACTIVITY LOG\n// ============================================\n\nenum ActivityType {\n  POST_CREATED\n  POST_UPDATED\n  POST_DELETED\n  COMMENT_CREATED\n  LINK_ADDED\n  USER_JOINED\n  USER_FOLLOWED\n}\n\nmodel ActivityLog {\n  id          String       @id @default(cuid())\n  userId      String\n  type        ActivityType\n  description String\n  metadata    Json? // Store additional data as JSON\n  createdAt   DateTime     @default(now())\n\n  @@index([userId])\n  @@index([createdAt])\n  @@index([type])\n}\n",
  "inlineSchemaHash": "b51f0cfb6f007e54e77ffe8acdbf4aabfc46167bcdea98fb061c1326e195f9b6",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"User\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"username\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"password\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"bio\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"avatar\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"role\",\"kind\":\"enum\",\"type\":\"Role\"},{\"name\":\"domain\",\"kind\":\"enum\",\"type\":\"Domain\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"approvalStatus\",\"kind\":\"enum\",\"type\":\"ApprovalStatus\"},{\"name\":\"socialLinks\",\"kind\":\"object\",\"type\":\"SocialLink\",\"relationName\":\"SocialLinkToUser\"},{\"name\":\"posts\",\"kind\":\"object\",\"type\":\"Post\",\"relationName\":\"PostToUser\"},{\"name\":\"comments\",\"kind\":\"object\",\"type\":\"Comment\",\"relationName\":\"CommentToUser\"},{\"name\":\"likes\",\"kind\":\"object\",\"type\":\"Like\",\"relationName\":\"LikeToUser\"},{\"name\":\"following\",\"kind\":\"object\",\"type\":\"Follow\",\"relationName\":\"UserFollowing\"},{\"name\":\"followers\",\"kind\":\"object\",\"type\":\"Follow\",\"relationName\":\"UserFollowers\"}],\"dbName\":null},\"SocialLink\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"url\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"icon\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"category\",\"kind\":\"enum\",\"type\":\"LinkCategory\"},{\"name\":\"displayOrder\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"isVisible\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"clicks\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"SocialLinkToUser\"}],\"dbName\":null},\"Post\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"authorId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"slug\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"content\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"excerpt\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"coverImage\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"PostStatus\"},{\"name\":\"viewCount\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"publishedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"author\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"PostToUser\"},{\"name\":\"tags\",\"kind\":\"object\",\"type\":\"PostTag\",\"relationName\":\"PostToPostTag\"},{\"name\":\"comments\",\"kind\":\"object\",\"type\":\"Comment\",\"relationName\":\"CommentToPost\"},{\"name\":\"likes\",\"kind\":\"object\",\"type\":\"Like\",\"relationName\":\"LikeToPost\"}],\"dbName\":null},\"Tag\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"slug\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"color\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"posts\",\"kind\":\"object\",\"type\":\"PostTag\",\"relationName\":\"PostTagToTag\"}],\"dbName\":null},\"PostTag\":{\"fields\":[{\"name\":\"postId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"tagId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"post\",\"kind\":\"object\",\"type\":\"Post\",\"relationName\":\"PostToPostTag\"},{\"name\":\"tag\",\"kind\":\"object\",\"type\":\"Tag\",\"relationName\":\"PostTagToTag\"}],\"dbName\":null},\"Comment\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"postId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"authorId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"content\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"parentId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isEdited\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"post\",\"kind\":\"object\",\"type\":\"Post\",\"relationName\":\"CommentToPost\"},{\"name\":\"author\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"CommentToUser\"},{\"name\":\"parent\",\"kind\":\"object\",\"type\":\"Comment\",\"relationName\":\"CommentReplies\"},{\"name\":\"replies\",\"kind\":\"object\",\"type\":\"Comment\",\"relationName\":\"CommentReplies\"}],\"dbName\":null},\"Like\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"postId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"post\",\"kind\":\"object\",\"type\":\"Post\",\"relationName\":\"LikeToPost\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"LikeToUser\"}],\"dbName\":null},\"Follow\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"followerId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"followingId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"follower\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"UserFollowing\"},{\"name\":\"following\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"UserFollowers\"}],\"dbName\":null},\"ActivityLog\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"type\",\"kind\":\"enum\",\"type\":\"ActivityType\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"metadata\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

